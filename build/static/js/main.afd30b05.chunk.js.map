{"version":3,"sources":["components/Button.jsx","App.js","serviceWorker.js","index.js"],"names":["Button","btnRef","React","createRef","state","isActive","dimpleX","dimpleY","event","clientX","clientY","this","current","getBoundingClientRect","x","y","setState","props","onClick","call","undefined","className","ref","clickHandle","bind","onAnimationEnd","animationEndHandle","children","style","left","top","Component","App","count","add1","minus1","add1IfOdd","add1Async","connect","dispatch","type","payload","setTimeout","Boolean","window","location","hostname","match","store","createStore","action","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+SA8CeA,G,8DA3Cb,aAAe,IAAD,8BACZ,gBACKC,OAASC,IAAMC,YACpB,EAAKC,MAAQ,CACXC,UAAU,EACVC,QAAS,EACTC,QAAS,GANC,E,wDASFC,GAAQ,IACVC,EAAqBD,EAArBC,QAASC,EAAYF,EAAZE,QADA,EAEAC,KAAKV,OAAOW,QAAQC,wBAA7BC,EAFS,EAETA,EAAGC,EAFM,EAENA,EACXJ,KAAKK,SAAS,CACZX,UAAU,EACVC,QAASG,EAAUK,EAAI,EACvBP,QAASG,EAAUK,EAAI,IAEzBJ,KAAKM,MAAMC,SAAWP,KAAKM,MAAMC,QAAQC,UAAKC,EAAWZ,K,2CAGzDG,KAAKK,SAAS,CACZX,UAAU,M,+BAGJ,IAAD,OACP,OACE,4BAAQgB,UAAU,SAChBC,IAAKX,KAAKV,OACViB,QAASP,KAAKY,YAAYC,KAAKb,MAC/Bc,eAAgB,WAAQ,EAAKC,uBAE5Bf,KAAKM,MAAMU,SAEVhB,KAAKP,MAAMC,SACT,0BACEgB,UAAU,SACVO,MAAO,CAAEC,KAAMlB,KAAKP,MAAME,QAASwB,IAAKnB,KAAKP,MAAMG,WAAqB,U,GArCjEL,IAAM6B,YCGrBC,E,uKAEF,OACE,yBAAKX,UAAU,OACb,iEACA,6BACE,uDAASV,KAAKM,MAAMgB,MAApB,WACA,kBAAC,EAAD,CAAQf,QAASP,KAAKM,MAAMiB,KAAKV,KAAKb,OAAtC,MACA,kBAAC,EAAD,CAAQO,QAASP,KAAKM,MAAMkB,OAAOX,KAAKb,OAAxC,MACA,kBAAC,EAAD,CAAQO,QAASP,KAAKM,MAAMmB,UAAUZ,KAAKb,OAA3C,0CACA,kBAAC,EAAD,CAAQO,QAASP,KAAKM,MAAMoB,UAAUb,KAAKb,OAA3C,yB,GAVQoB,aAmCHO,mBAlBf,SAAyBlC,GACvB,MAAO,CACL6B,MAAO7B,EAAM6B,UAGjB,SAA4BM,GAC1B,MAAO,CACLL,KAAM,WAAQK,EAAS,CAAEC,KAAM,MAAOC,QAAS,KAC/CN,OAAQ,WAAQI,EAAS,CAAEC,KAAM,QAASC,QAAS,KACnDL,UAAW,WAAQG,EAAS,CAAEC,KAAM,WAAYC,QAAS,KACzDJ,UAAW,WACTK,YAAW,WACTH,EAAS,CAAEC,KAAM,MAAOC,QAAS,MAChC,SAKMH,CAA6CN,GC5BxCW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WCkBAC,EAAQC,aA5BE,SAAC7C,EAAO8C,GAItB,OAHA9C,EAAQA,GAAS,CACf6B,MAAO,GAEDiB,EAAOV,MACb,IAAK,MACH,OAAO,eACFpC,EADL,CAEE6B,MAAO7B,EAAM6B,MAAQiB,EAAOT,UAEhC,IAAK,QACH,OAAO,eACFrC,EADL,CAEE6B,MAAO7B,EAAM6B,MAAQiB,EAAOT,UAEhC,IAAK,WACH,OAAIrC,EAAM6B,MAAQ,IAAM,EACf,eACF7B,EADL,CAEE6B,MAAO7B,EAAM6B,MAAQiB,EAAOT,UAGvBrC,EAEX,QACE,OAAOA,MAKb+C,IAASC,OACP,kBAAC,IAAD,CAAUJ,MAAOA,GACf,kBAAC,EAAD,OAEFK,SAASC,eAAe,SDyFpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.afd30b05.chunk.js","sourcesContent":["import React from \"react\"\nimport \"./Button.css\"\nclass Button extends React.Component {\n  constructor() {\n    super()\n    this.btnRef = React.createRef()\n    this.state = {\n      isActive: false,\n      dimpleX: 0,\n      dimpleY: 0\n    }\n  }\n  clickHandle(event) {\n    const { clientX, clientY } = event\n    const { x, y } = this.btnRef.current.getBoundingClientRect()\n    this.setState({\n      isActive: true,\n      dimpleX: clientX - x - 5,\n      dimpleY: clientY - y - 5\n    })\n    this.props.onClick && this.props.onClick.call(undefined, event)\n  }\n  animationEndHandle() {\n    this.setState({\n      isActive: false\n    })\n  }\n  render() {\n    return (\n      <button className=\"button\"\n        ref={this.btnRef}\n        onClick={this.clickHandle.bind(this)}\n        onAnimationEnd={() => { this.animationEndHandle() }}\n      >\n        {this.props.children}\n        {\n          this.state.isActive ?\n            <span\n              className=\"circle\"\n              style={{ left: this.state.dimpleX, top: this.state.dimpleY }}></span> : null\n        }\n      </button>\n    )\n  }\n}\n\nexport default Button","import React, { Component } from 'react';\nimport { connect } from \"react-redux\"\nimport './App.css';\nimport Button from \"./components/Button\"\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Hello React + Redux + React-Redux</h1>\n        <div>\n          <p>你点击了 {this.props.count} 次</p>\n          <Button onClick={this.props.add1.bind(this)}>+1</Button>\n          <Button onClick={this.props.minus1.bind(this)}>-1</Button>\n          <Button onClick={this.props.add1IfOdd.bind(this)}>数字为单数，+1</Button>\n          <Button onClick={this.props.add1Async.bind(this)}>1秒后+1</Button>\n        </div>\n      </div>\n    )\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    count: state.count\n  }\n}\nfunction mapDispatchToProps(dispatch) {\n  return {\n    add1: () => { dispatch({ type: \"add\", payload: 1 }) },\n    minus1: () => { dispatch({ type: \"minus\", payload: 1 }) },\n    add1IfOdd: () => { dispatch({ type: \"addIfOdd\", payload: 1 }) },\n    add1Async: () => {\n      setTimeout(() => {\n        dispatch({ type: \"add\", payload: 1 })\n      }, 1000)\n    }\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore } from \"redux\"\nimport { Provider } from \"react-redux\"\n\nconst reducer = (state, action) => {\n  state = state || {\n    count: 0\n  }\n  switch (action.type) {\n    case \"add\":\n      return {\n        ...state,\n        count: state.count + action.payload\n      }\n    case \"minus\":\n      return {\n        ...state,\n        count: state.count - action.payload\n      }\n    case \"addIfOdd\":\n      if (state.count % 2 === 1) {\n        return {\n          ...state,\n          count: state.count + action.payload\n        }\n      } else {\n        return state\n      }\n    default:\n      return state\n  }\n}\nconst store = createStore(reducer)\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}